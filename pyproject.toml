[tool.ruff]

line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    "F", "E", "I", "UP", "YTT", "ANN", "S", "BLE", "B", "A", "COM", "C4", "DTZ",
    "EM", "ISC", "G", "INP", "PIE", "T20", "Q003", "RSE", "RET", "SIM", "TID", "PTH",
    "ERA", "PD", "PLC", "PLE", "PLR", "PLW", "TRY", "NPY", "RUF", "ASYNC",
]
ignore = [
    "RUF001",  # ambiguous characters not something I want to enforce here.
    "G002",  # erroneous issue with %-logging when logging can be confiured for % logging
    "S101",  # use of assert here is a known quantity, blame typing memes
    "PLR2004",  # Magic value comparison, may remove later
    "PLC0105",  # no, I don't like co naming style for typevars, bye
    "SIM105",  # supressable exception, I'm not paying the overhead of contextlib.supress for stylistic choices.
    "C90",  # mccabe complexity memes
    "ANN101", # missing "Self" annotation, self is implicit
    "ANN102", # missing "type[Self]" annotation, also implicit
    "ANN202", # implied return fine sometimes
    "ANN204",  # special method return types
    "ANN401",  # Any return
    "PLR0912", # too many branches
    "PLR0913", # number of function arguments
    "PLR0915",  # too many statements.... in an async entrypoint handling graceful shutdown...
    "UP007", # "Use | For Union" doesn't account for typevar tuple unpacking.
    "COM812", # ruff format suggested
    "ISC001", # ruff format suggested
    "UP031", # No, I like % formatting more for some things...
]
unfixable = [
    "ERA"  # I don't want anything erroneously detected deleted by this.
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"


[tool.pdm]
distribution = true
[project]
name = "salamander"
description = "\"A discord bot\""
readme = "README.md"
license = {text = "MPL-2.0"}
requires-python = ">=3.12"
authors = [
    { name = "Michael Hall", email = "michael@michaelhall.tech" },
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "typing-extensions>=4.12.2",
    "xxhash>=3.4.1",
    "platformdirs>=4.2.2",
    "apsw>=3.46.0.1",
    "async-utils @ git+https://github.com/mikeshardmind/async-utils",
    "scheduler @ git+https://github.com/mikeshardmind/discord-scheduler",
    "msgspec>=0.18.6",
    "discord-py[speed] @ git+https://github.com/mikeshardmind/discord.py@salamander-reloaded",
    "pytz>=2024.1",
    "winloop>=0.1.6; sys_platform == \"win32\"",
    "uvloop>=0.19.0; sys_platform == \"linux\" or sys_platform == \"darwin\"",
    "mikeshardmind-base2048>=1.0.0",
    "aiohttp>=3.10.2",
    "aiodns>=3.2.0",
]
version = "0.1.0"


[tool.pyright]
include = ["src"]
typeCheckingMode = "strict"
pythonVersion = "3.12"
pythonPlatform = "All"
reportCallInDefaultInitializer = "warning"
reportImportCycles = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "warning"


[tool.pdm.scripts]
salamander = {call = "salamander.bot:main"}
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
